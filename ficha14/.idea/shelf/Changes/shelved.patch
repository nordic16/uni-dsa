Index: ../ficha-12/src/ex6/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ex6;\n\nimport java.util.Arrays;\nimport java.util.Random;\n\npublic class Main {\n    private static final Random random = new Random(System.currentTimeMillis());\n\n    public static void quicksort(Comparable[] arr) {\n        quicksort(arr, 0, arr.length-1);\n    }\n\n    ///  TODO: figure out tomorrow.\n    private static void quicksort(Comparable[] arr, int lo, int hi) {\n        if (hi <= lo) return;\n        int gt = hi, lt = lo;\n        int i = lo+1;\n        Comparable v = arr[lo];\n\n        while (i <= gt) {\n            int cmp = arr[i].compareTo(v);\n            if (cmp < 0) {\n                exch(arr, lt++, i++);\n            } else if (cmp > 0) {\n                exch(arr, i, gt--);\n            } else {\n                i++;\n            }\n        }\n\n        quicksort(arr, lo, lt-1);\n        quicksort(arr, gt+1,  hi);\n    }\n\n\n\n    private static void exch(Comparable[] arr, int i, int j) {\n        Comparable tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n    }\n\n\n    public static void main(String[] args) {\n        Integer[] arr = random.ints(40, 0 , 256).boxed().toArray(Integer[]::new);\n        System.out.println(Arrays.toString(arr));\n        quicksort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ficha-12/src/ex6/Main.java b/../ficha-12/src/ex6/Main.java
--- a/../ficha-12/src/ex6/Main.java	(revision c77aa758852675df29a087d8cf963225b2c5823b)
+++ b/../ficha-12/src/ex6/Main.java	(date 1749029647646)
@@ -10,7 +10,6 @@
         quicksort(arr, 0, arr.length-1);
     }
 
-    ///  TODO: figure out tomorrow.
     private static void quicksort(Comparable[] arr, int lo, int hi) {
         if (hi <= lo) return;
         int gt = hi, lt = lo;
Index: ../ficha11/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ficha11/.idea/.gitignore b/../ficha11/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1749140920935)
+++ b/../ficha11/.idea/.gitignore	(date 1749140920935)
@@ -0,0 +1,5 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Environment-dependent path to Maven home directory
+/mavenHomeManager.xml
Index: ../ficha11/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ficha11/.idea/modules.xml b/../ficha11/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1749140938254)
+++ b/../ficha11/.idea/modules.xml	(date 1749140938254)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/ficha11.iml" filepath="$PROJECT_DIR$/ficha11.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: ficha14.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ficha14.iml b/ficha14.iml
new file mode 100644
--- /dev/null	(date 1749132071247)
+++ b/ficha14.iml	(date 1749132071247)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: ../ficha11/ficha11.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ficha11/ficha11.iml b/../ficha11/ficha11.iml
new file mode 100644
--- /dev/null	(date 1749140938249)
+++ b/../ficha11/ficha11.iml	(date 1749140938249)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: ../ficha11/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ficha11/.idea/vcs.xml b/../ficha11/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1749140938264)
+++ b/../ficha11/.idea/vcs.xml	(date 1749140938264)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1749132071251)
+++ b/.idea/misc.xml	(date 1749132071251)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="temurin-21" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1749132071249)
+++ b/.idea/modules.xml	(date 1749132071249)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/ficha14.iml" filepath="$PROJECT_DIR$/ficha14.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: ../ficha11/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ficha11/.idea/misc.xml b/../ficha11/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1749140938260)
+++ b/../ficha11/.idea/misc.xml	(date 1749140938260)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="temurin-21" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1749132076056)
+++ b/.idea/.gitignore	(date 1749132076056)
@@ -0,0 +1,5 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Environment-dependent path to Maven home directory
+/mavenHomeManager.xml
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1749132076812)
+++ b/.idea/vcs.xml	(date 1749132076812)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/ex6/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ex6/Main.java b/src/ex6/Main.java
new file mode 100644
--- /dev/null	(date 1749142606641)
+++ b/src/ex6/Main.java	(date 1749142606641)
@@ -0,0 +1,13 @@
+package ex6;
+
+public class Main {
+    public static void main(String[] args) {
+        BinarySearchST<String, Integer> data = new BinarySearchST<>();
+        data.put("h", 1);
+        data.put("i", 2);
+        data.put("j", 3);
+        data.put("k", 4);
+
+        System.out.println(data);
+    }
+}
Index: ../ficha13/ficha13.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ficha13/ficha13.iml b/../ficha13/ficha13.iml
new file mode 100644
--- /dev/null	(date 1749033087368)
+++ b/../ficha13/ficha13.iml	(date 1749033087368)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: src/ex3/Ex3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ex3/Ex3.java b/src/ex3/Ex3.java
new file mode 100644
--- /dev/null	(date 1749136196594)
+++ b/src/ex3/Ex3.java	(date 1749136196594)
@@ -0,0 +1,45 @@
+package ex3;
+
+import utils.ST;
+import utils.SequentialSearchST;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.util.Scanner;
+
+public class Ex3 {
+    public static void main(String[] args) throws FileNotFoundException {
+        ST<String, Integer> grades = new SequentialSearchST<>();
+        fillGrades(grades);
+
+        System.out.printf("Average is: %.2f\n", getAverage(grades));
+
+    }
+
+    private static float getAverage(ST<String, Integer> grades) throws FileNotFoundException {
+        float avg = 0;
+        int len = 0;
+
+        try (Scanner sc = new Scanner(new File("src/utils/grades.txt"))) {
+            for (; sc.hasNextLine(); len++) {
+                avg += grades.get(sc.nextLine());
+            }
+        }
+
+        return avg / (len == 0 ? 1 : len);
+    }
+
+    private static void fillGrades(ST<String, Integer> grades) {
+        grades.put("A+", 20);
+        grades.put("A", 19);
+        grades.put("A-", 18);
+        grades.put("B+", 17);
+        grades.put("B", 16);
+        grades.put("B-", 15);
+        grades.put("C+", 14);
+        grades.put("C", 13);
+        grades.put("C-", 12);
+        grades.put("D+", 11);
+        grades.put("D", 10);
+    }
+}
Index: ../ficha10/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_22\" default=\"true\" project-jdk-name=\"22\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ficha10/.idea/misc.xml b/../ficha10/.idea/misc.xml
--- a/../ficha10/.idea/misc.xml	(revision c77aa758852675df29a087d8cf963225b2c5823b)
+++ b/../ficha10/.idea/misc.xml	(date 1749141002075)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: ../ficha13/src/ex1/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ficha13/src/ex1/Main.java b/../ficha13/src/ex1/Main.java
new file mode 100644
--- /dev/null	(date 1749033790124)
+++ b/../ficha13/src/ex1/Main.java	(date 1749033790124)
@@ -0,0 +1,37 @@
+package ex1;
+
+import java.util.PriorityQueue;
+
+public class Main {
+    public static void main(String[] args) {
+        PriorityQueue<String> pq = new PriorityQueue<>();
+        pq.add("P");
+        pq.add("R");
+        pq.add("I");
+        pq.add("O");
+        System.out.println(pq.poll());
+
+        pq.add("R");
+        System.out.println(pq.poll());
+        System.out.println(pq.poll());
+        pq.add("I");
+        System.out.println(pq.poll());
+        pq.add("T");
+        System.out.println(pq.poll());
+        pq.add("Y");
+        System.out.println(pq.poll());
+        System.out.println(pq.poll());
+        System.out.println(pq.poll() + "\n");
+
+        pq.add("Q");
+        pq.add("U");
+        pq.add("E");
+        System.out.println(pq.poll());
+        System.out.println(pq.poll());
+        System.out.println(pq.poll());
+        pq.add("U");
+        System.out.println(pq.poll());
+        pq.add("E");
+
+    }
+}
Index: src/utils/grades.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/utils/grades.txt b/src/utils/grades.txt
new file mode 100644
--- /dev/null	(date 1749136206773)
+++ b/src/utils/grades.txt	(date 1749136206773)
@@ -0,0 +1,11 @@
+A+
+A
+A-
+B+
+B
+B-
+C+
+C
+C-
+D+
+D
\ No newline at end of file
Index: ../ficha13/src/ex9/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ficha13/src/ex9/Main.java b/../ficha13/src/ex9/Main.java
new file mode 100644
--- /dev/null	(date 1749046445605)
+++ b/../ficha13/src/ex9/Main.java	(date 1749046445605)
@@ -0,0 +1,27 @@
+package ex9;
+
+import java.util.Arrays;
+
+public class Main {
+    public static void main(String[] args) {
+        int[] arr = new int[10];
+
+        for (int i = 0; i < arr.length; i++) {
+            arr[i] = arr.length - i;
+        }
+        System.out.println(Arrays.toString(arr));
+        System.out.printf("is max heap: %s\n", isMaxHeap(arr));
+        arr[0] = 0;
+        System.out.println(Arrays.toString(arr));
+        System.out.printf("is max heap: %s\n", isMaxHeap(arr));
+    }
+
+    private static boolean isMaxHeap(int[] arr) {
+        for (int i = 0; i < arr.length-1; i++) {
+            if (arr[i] < arr[i+1]) {
+                return false;
+            }
+        }
+        return true;
+    }
+}
Index: src/ex4/Ex4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ex4/Ex4.java b/src/ex4/Ex4.java
new file mode 100644
--- /dev/null	(date 1749139926994)
+++ b/src/ex4/Ex4.java	(date 1749139926994)
@@ -0,0 +1,17 @@
+package ex4;
+
+import utils.ST;
+import utils.SequentialSearchST;
+
+import java.util.Arrays;
+
+public class Ex4 {
+    public static void main(String[] args) {
+        SequentialSearchST<String, Integer> data = new SequentialSearchST<>();
+        data.put("x", 25);
+        data.put("y", 50);
+        data.put("z", 75);
+
+        System.out.println(data);
+    }
+}
Index: ../ficha13/src/ex11/TopM.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ficha13/src/ex11/TopM.java b/../ficha13/src/ex11/TopM.java
new file mode 100644
--- /dev/null	(date 1749058906208)
+++ b/../ficha13/src/ex11/TopM.java	(date 1749058906208)
@@ -0,0 +1,40 @@
+package ex11;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.util.Arrays;
+import java.util.PriorityQueue;
+import java.util.Scanner;
+
+public class TopM {
+    private static final int M = 3;
+
+    public static void main(String[] args) throws FileNotFoundException {
+        assert (M <= 6);
+        Point3D[] arr = readFromFile();
+        Point3D[] excluded = new Point3D[M];
+
+        MaxPQ<Point3D> pq = new MaxPQ<>(arr.length);
+        for (Point3D p : arr) {
+            pq.insert(p);
+        }
+
+        for (int i = 0; i < M; i++) {
+            System.out.println(pq.delMax());
+        }
+    }
+
+
+    private static Point3D[] readFromFile() throws FileNotFoundException {
+        Point3D[] arr = new Point3D[6];
+
+        try (Scanner sc = new Scanner(new File("src/ex11/points.txt"))) {
+            for (int i = 0; i < arr.length && sc.hasNextLine(); i++) {
+                String[] fields = sc.nextLine().split(" ");
+                arr[i] = new Point3D(Float.parseFloat(fields[0]), Float.parseFloat(fields[1]), Float.parseFloat(fields[2]));
+            }
+        }
+        return arr;
+    }
+
+}
Index: src/ex5/Ex5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ex5/Ex5.java b/src/ex5/Ex5.java
new file mode 100644
--- /dev/null	(date 1749139995859)
+++ b/src/ex5/Ex5.java	(date 1749139995859)
@@ -0,0 +1,19 @@
+package ex5;
+
+import utils.ST;
+import utils.SequentialSearchST;
+
+import java.util.Arrays;
+
+public class Ex5 {
+    public static void main(String[] args) {
+        ST<String, Integer> vals = new SequentialSearchST<>();
+        vals.put("one", 1);
+        vals.put("two", 2);
+        vals.put("three", 3);
+
+        System.out.printf("Before deletion: %s\n", vals);
+        vals.delete("two");
+        System.out.printf("After deletion: %s\n", vals);
+    }
+}
Index: ../ficha13/src/ex11/points.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ficha13/src/ex11/points.txt b/../ficha13/src/ex11/points.txt
new file mode 100644
--- /dev/null	(date 1749058975174)
+++ b/../ficha13/src/ex11/points.txt	(date 1749058975174)
@@ -0,0 +1,6 @@
+2.0 1.0 3.0
+2.0 1.0 9.0
+1.0 2.0 4.0
+2.0 1.0 1.0
+1.0 2.0 5.0
+2.0 1.0 2.0
\ No newline at end of file
Index: ../ficha13/src/ex11/Point3D.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ficha13/src/ex11/Point3D.java b/../ficha13/src/ex11/Point3D.java
new file mode 100644
--- /dev/null	(date 1749059328643)
+++ b/../ficha13/src/ex11/Point3D.java	(date 1749059328643)
@@ -0,0 +1,48 @@
+package ex11;
+
+import java.util.Objects;
+
+public class Point3D implements Comparable<Point3D> {
+    private final float x;
+    private final float y;
+    private final float z;
+
+    public Point3D(float x, float y, float z) {
+        this.x = x;
+        this.y = y;
+        this.z = z;
+    }
+
+    // closest dots must be first.
+    @Override
+    public int compareTo(Point3D o) {
+        double calc = Math.sqrt(x*x + y*y + z*z) - Math.sqrt(o.x*o.x + o.y*o.y + o.z*o.z);
+
+        if (calc > 0) {
+            return 1;
+
+        } else if (calc < 0) {
+            return -1;
+
+        } else {
+            return 0;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (o == null || getClass() != o.getClass()) return false;
+        Point3D point3D = (Point3D) o;
+        return Float.compare(x, point3D.x) == 0 && Float.compare(y, point3D.y) == 0 && Float.compare(z, point3D.z) == 0;
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(x, y, z);
+    }
+
+    @Override
+    public String toString() {
+        return "(%.2f, %.2f, %.2f)".formatted(x, y, z);
+    }
+}
